24-12-18.13:35:48.754 [main            ] INFO  Application            - Starting Application using Java 1.8.0_432 on LAPTOP-FJDJGS3U with PID 26436 (D:\java\demoTest\s-pay-mall-mvc-241001-xfg-order-pay 2\ddd-103\ddd-103-app\target\classes started by 程宇乐 in D:\java\demoTest\s-pay-mall-mvc-241001-xfg-order-pay 2\ddd-103)
24-12-18.13:35:48.757 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-12-18.13:35:50.002 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-12-18.13:35:50.005 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-12-18.13:35:50.048 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
24-12-18.13:35:50.865 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-12-18.13:35:50.867 [main            ] INFO  AprLifecycleListener   - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
24-12-18.13:35:50.868 [main            ] INFO  AprLifecycleListener   - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
24-12-18.13:35:50.868 [main            ] INFO  AprLifecycleListener   - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
24-12-18.13:35:50.895 [main            ] INFO  AprLifecycleListener   - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
24-12-18.13:35:50.926 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-12-18.13:35:50.927 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-12-18.13:35:50.928 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-12-18.13:35:51.283 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-12-18.13:35:51.283 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2475 ms
24-12-18.13:35:52.329 [main            ] INFO  Version                - Redisson 3.23.4
24-12-18.13:35:53.145 [redisson-netty-2-4] INFO  MasterPubSubConnectionPool - 1 connections initialized for 42.194.241.83/42.194.241.83:16379
24-12-18.13:35:53.253 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 42.194.241.83/42.194.241.83:16379
24-12-18.13:35:54.766 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-12-18.13:35:54.810 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-12-18.13:35:54.825 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-12-18.13:35:54.847 [main            ] INFO  Application            - Started Application in 6.882 seconds (JVM running for 8.798)
24-12-18.13:35:55.042 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:35:55.173 [RMI TCP Connection(1)-2.0.0.1] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-12-18.13:35:55.173 [RMI TCP Connection(1)-2.0.0.1] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-12-18.13:35:55.177 [RMI TCP Connection(1)-2.0.0.1] INFO  DispatcherServlet      - Completed initialization in 4 ms
24-12-18.13:35:56.353 [RMI TCP Connection(3)-2.0.0.1] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-12-18.13:36:00.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:36:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:36:10.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:36:13.749 [RMI TCP Connection(3)-2.0.0.1] ERROR HikariPool             - HikariPool-1 - Exception during pool initialization.
java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:906)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:831)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:198)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:364)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:476)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:159)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:117)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:330)
	at org.springframework.boot.actuate.jdbc.DataSourceHealthIndicator.getProduct(DataSourceHealthIndicator.java:122)
	at org.springframework.boot.actuate.jdbc.DataSourceHealthIndicator.doDataSourceHealthCheck(DataSourceHealthIndicator.java:105)
	at org.springframework.boot.actuate.jdbc.DataSourceHealthIndicator.doHealthCheck(DataSourceHealthIndicator.java:100)
	at org.springframework.boot.actuate.health.AbstractHealthIndicator.health(AbstractHealthIndicator.java:82)
	at org.springframework.boot.actuate.health.HealthIndicator.getHealth(HealthIndicator.java:37)
	at org.springframework.boot.actuate.health.HealthEndpoint.getHealth(HealthEndpoint.java:94)
	at org.springframework.boot.actuate.health.HealthEndpoint.getHealth(HealthEndpoint.java:41)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getLoggedHealth(HealthEndpointSupport.java:172)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getContribution(HealthEndpointSupport.java:145)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getAggregateContribution(HealthEndpointSupport.java:156)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getContribution(HealthEndpointSupport.java:141)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:110)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:81)
	at org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:88)
	at org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:78)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:282)
	at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:74)
	at org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:60)
	at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:124)
	at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:97)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468)
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401)
	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)
	at sun.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)
	at sun.rmi.transport.Transport$1.run(Transport.java:200)
	at sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151)
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167)
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:89)
	at com.mysql.cj.NativeSession.connect(NativeSession.java:144)
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:850)
	... 62 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155)
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:63)
	... 64 common frames omitted
24-12-18.13:36:13.754 [RMI TCP Connection(3)-2.0.0.1] WARN  DataSourceHealthIndicator - DataSource health check failed
org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:83)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:330)
	at org.springframework.boot.actuate.jdbc.DataSourceHealthIndicator.getProduct(DataSourceHealthIndicator.java:122)
	at org.springframework.boot.actuate.jdbc.DataSourceHealthIndicator.doDataSourceHealthCheck(DataSourceHealthIndicator.java:105)
	at org.springframework.boot.actuate.jdbc.DataSourceHealthIndicator.doHealthCheck(DataSourceHealthIndicator.java:100)
	at org.springframework.boot.actuate.health.AbstractHealthIndicator.health(AbstractHealthIndicator.java:82)
	at org.springframework.boot.actuate.health.HealthIndicator.getHealth(HealthIndicator.java:37)
	at org.springframework.boot.actuate.health.HealthEndpoint.getHealth(HealthEndpoint.java:94)
	at org.springframework.boot.actuate.health.HealthEndpoint.getHealth(HealthEndpoint.java:41)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getLoggedHealth(HealthEndpointSupport.java:172)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getContribution(HealthEndpointSupport.java:145)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getAggregateContribution(HealthEndpointSupport.java:156)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getContribution(HealthEndpointSupport.java:141)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:110)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:81)
	at org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:88)
	at org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:78)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:282)
	at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:74)
	at org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:60)
	at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:124)
	at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:97)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468)
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401)
	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)
	at sun.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)
	at sun.rmi.transport.Transport$1.run(Transport.java:200)
	at sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:906)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:831)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:198)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:364)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:476)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:159)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:117)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80)
	... 48 common frames omitted
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151)
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167)
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:89)
	at com.mysql.cj.NativeSession.connect(NativeSession.java:144)
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:850)
	... 62 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155)
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:63)
	... 64 common frames omitted
24-12-18.13:36:13.758 [RMI TCP Connection(3)-2.0.0.1] WARN  HealthEndpointSupport  - Health contributor org.springframework.boot.actuate.jdbc.DataSourceHealthIndicator (db) took 17407ms to respond
24-12-18.13:36:15.066 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:36:20.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:36:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:36:30.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:36:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:36:40.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:36:45.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:36:50.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:36:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:37:00.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:37:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:37:10.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:37:15.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:37:20.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:37:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:37:30.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:37:35.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:37:40.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:37:45.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:37:50.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:37:55.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:38:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:38:05.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:38:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:38:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:38:20.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:38:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:38:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:38:35.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:38:40.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:38:45.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:38:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:38:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:39:00.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:39:05.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:39:10.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:39:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:39:20.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:39:25.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:39:30.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:39:35.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:39:40.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:39:45.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:39:50.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:39:55.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:40:00.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:40:05.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:40:10.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:40:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:40:20.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:40:20.070 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.13:40:20.094 [scheduling-1    ] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-12-18.13:40:37.367 [scheduling-1    ] ERROR HikariPool             - HikariPool-1 - Exception during pool initialization.
java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:906)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:831)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:198)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:364)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:476)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:159)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:117)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:337)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	at com.sun.proxy.$Proxy92.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:288)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy93.updateStrategyAwardStock(Unknown Source)
	at com.cheng.infrastructure.persistent.repository.StrategyRepository.updateStrategyAwardStock(StrategyRepository.java:360)
	at com.cheng.domain.strategy.service.raffle.DefaultRaffleStrategy.updateStrategyAwardStock(DefaultRaffleStrategy.java:172)
	at com.cheng.trigger.job.UpdateAwardStockJob.exec(UpdateAwardStockJob.java:32)
	at sun.reflect.GeneratedMethodAccessor19.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:84)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:95)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151)
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167)
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:89)
	at com.mysql.cj.NativeSession.connect(NativeSession.java:144)
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:850)
	... 49 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155)
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:63)
	... 51 common frames omitted
24-12-18.13:40:37.373 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
### The error may exist in file [D:\java\demoTest\s-pay-mall-mvc-241001-xfg-order-pay 2\ddd-103\ddd-103-app\target\classes\mybatis\mapper\IStrategyAwardDao.xml]
### The error may involve com.cheng.infrastructure.persistent.dao.IStrategyAwardDao.updateStrategyAwardStock
### The error occurred while executing an update
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:96)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:441)
	at com.sun.proxy.$Proxy92.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:288)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy93.updateStrategyAwardStock(Unknown Source)
	at com.cheng.infrastructure.persistent.repository.StrategyRepository.updateStrategyAwardStock(StrategyRepository.java:360)
	at com.cheng.domain.strategy.service.raffle.DefaultRaffleStrategy.updateStrategyAwardStock(DefaultRaffleStrategy.java:172)
	at com.cheng.trigger.job.UpdateAwardStockJob.exec(UpdateAwardStockJob.java:32)
	at sun.reflect.GeneratedMethodAccessor19.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:84)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:95)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
### The error may exist in file [D:\java\demoTest\s-pay-mall-mvc-241001-xfg-order-pay 2\ddd-103\ddd-103-app\target\classes\mybatis\mapper\IStrategyAwardDao.xml]
### The error may involve com.cheng.infrastructure.persistent.dao.IStrategyAwardDao.updateStrategyAwardStock
### The error occurred while executing an update
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:199)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	... 22 common frames omitted
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:83)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:337)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	... 27 common frames omitted
Caused by: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:906)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:831)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:198)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:364)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:476)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:159)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:117)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80)
	... 35 common frames omitted
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151)
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167)
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:89)
	at com.mysql.cj.NativeSession.connect(NativeSession.java:144)
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:850)
	... 49 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155)
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:63)
	... 51 common frames omitted
24-12-18.13:40:40.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:40:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:40:50.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:40:55.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:41:00.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:41:05.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:41:10.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:41:15.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:41:20.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:41:25.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:41:30.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:41:35.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:41:40.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:41:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:41:50.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:41:55.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:42:00.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:42:05.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:42:10.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:42:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:42:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:42:25.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:42:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:42:35.017 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:42:42.432 [main            ] INFO  Application            - Starting Application using Java 1.8.0_432 on LAPTOP-FJDJGS3U with PID 20696 (D:\java\demoTest\s-pay-mall-mvc-241001-xfg-order-pay 2\ddd-103\ddd-103-app\target\classes started by 程宇乐 in D:\java\demoTest\s-pay-mall-mvc-241001-xfg-order-pay 2\ddd-103)
24-12-18.13:42:42.436 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-12-18.13:42:43.434 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-12-18.13:42:43.437 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-12-18.13:42:43.478 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
24-12-18.13:42:44.131 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-12-18.13:42:44.132 [main            ] INFO  AprLifecycleListener   - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
24-12-18.13:42:44.133 [main            ] INFO  AprLifecycleListener   - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
24-12-18.13:42:44.133 [main            ] INFO  AprLifecycleListener   - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
24-12-18.13:42:44.139 [main            ] INFO  AprLifecycleListener   - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
24-12-18.13:42:44.149 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-12-18.13:42:44.160 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-12-18.13:42:44.160 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-12-18.13:42:44.302 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-12-18.13:42:44.302 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1823 ms
24-12-18.13:42:45.340 [main            ] INFO  Version                - Redisson 3.23.4
24-12-18.13:42:46.039 [redisson-netty-2-4] INFO  MasterPubSubConnectionPool - 1 connections initialized for 42.194.241.83/42.194.241.83:16379
24-12-18.13:42:46.131 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 42.194.241.83/42.194.241.83:16379
24-12-18.13:42:47.259 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-12-18.13:42:47.306 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-12-18.13:42:47.320 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-12-18.13:42:47.346 [main            ] INFO  Application            - Started Application in 5.544 seconds (JVM running for 6.868)
24-12-18.13:42:48.094 [RMI TCP Connection(1)-2.0.0.1] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-12-18.13:42:48.094 [RMI TCP Connection(1)-2.0.0.1] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-12-18.13:42:48.098 [RMI TCP Connection(1)-2.0.0.1] INFO  DispatcherServlet      - Completed initialization in 3 ms
24-12-18.13:42:48.101 [RMI TCP Connection(2)-2.0.0.1] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-12-18.13:42:49.179 [RMI TCP Connection(2)-2.0.0.1] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-12-18.13:42:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:42:55.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:43:00.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:43:05.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:43:10.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:43:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:43:20.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:43:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:43:30.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:43:35.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:43:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:43:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:43:50.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:43:55.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:44:00.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:44:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:44:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:44:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:44:20.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:44:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:44:30.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:44:35.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:44:40.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:44:45.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:44:50.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:44:55.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:45:00.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:45:05.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:45:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:45:15.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:45:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:45:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:45:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:45:35.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:45:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:45:45.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:45:50.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:45:55.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:46:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:46:05.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:46:10.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:46:15.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:46:20.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:46:23.263 [http-nio-8091-exec-6] INFO  IRaffleServiceController - 奖品列表查询接口开始--strategyId:0
24-12-18.13:46:23.394 [http-nio-8091-exec-6] INFO  IRaffleServiceController - 奖品列表查询接口成功--strategyId:0
24-12-18.13:46:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:46:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:46:34.576 [http-nio-8091-exec-5] INFO  IRaffleServiceController - 奖品列表查询接口开始--strategyId:100006
24-12-18.13:46:34.615 [http-nio-8091-exec-5] INFO  IRaffleServiceController - 奖品列表查询接口成功--strategyId:100006
24-12-18.13:46:35.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:46:40.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:46:45.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:46:46.048 [http-nio-8091-exec-11] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.13:46:46.050 [http-nio-8091-exec-11] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.13:46:46.072 [http-nio-8091-exec-11] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.13:46:46.088 [http-nio-8091-exec-11] INFO  DefaultLogicChain      - rateRange：13
24-12-18.13:46:46.089 [http-nio-8091-exec-11] INFO  DefaultLogicChain      - 生成的key:6
24-12-18.13:46:46.099 [http-nio-8091-exec-11] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:100
24-12-18.13:46:46.101 [http-nio-8091-exec-11] INFO  AbstractRaffleStrategy - rule_default
24-12-18.13:46:46.103 [http-nio-8091-exec-11] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:100
24-12-18.13:46:46.123 [http-nio-8091-exec-11] INFO  DefaultRaffleStrategy  - 奖品没有设置规则树
24-12-18.13:46:46.125 [http-nio-8091-exec-11] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.13:46:46.125 [http-nio-8091-exec-11] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.13:46:46.133 [http-nio-8091-exec-11] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.13:46:46.136 [http-nio-8091-exec-11] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.13:46:46.138 [http-nio-8091-exec-11] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.13:46:50.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:46:53.330 [http-nio-8091-exec-12] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.13:46:53.330 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.13:46:53.346 [http-nio-8091-exec-12] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.13:46:53.357 [http-nio-8091-exec-12] INFO  DefaultLogicChain      - rateRange：13
24-12-18.13:46:53.358 [http-nio-8091-exec-12] INFO  DefaultLogicChain      - 生成的key:12
24-12-18.13:46:53.372 [http-nio-8091-exec-12] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:105
24-12-18.13:46:53.372 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - rule_default
24-12-18.13:46:53.372 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:105
24-12-18.13:46:53.391 [http-nio-8091-exec-12] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.13:46:53.392 [http-nio-8091-exec-12] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.13:46:53.439 [http-nio-8091-exec-12] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.13:46:53.441 [http-nio-8091-exec-12] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.13:46:53.444 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.13:46:53.445 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.13:46:53.445 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.13:46:53.445 [http-nio-8091-exec-12] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.13:46:53.445 [http-nio-8091-exec-12] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:105 strategyId:100006
24-12-18.13:46:53.467 [http-nio-8091-exec-12] INFO  StrategyRepository     - 策略奖品库存加锁失败：strategy_award_count_key_100006_105_98
24-12-18.13:46:53.467 [http-nio-8091-exec-12] INFO  RuleStockLogicTreeNode - 库存扣减失败: userId:system,awardId:105 strategyId:100006
24-12-18.13:46:53.470 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.13:46:53.470 [http-nio-8091-exec-12] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.13:46:53.470 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.13:46:53.470 [http-nio-8091-exec-12] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.13:46:53.487 [http-nio-8091-exec-12] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.13:46:53.488 [http-nio-8091-exec-12] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.13:46:53.488 [http-nio-8091-exec-12] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.13:46:55.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:47:00.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:47:02.330 [http-nio-8091-exec-14] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.13:47:02.330 [http-nio-8091-exec-14] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.13:47:02.338 [http-nio-8091-exec-14] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.13:47:02.349 [http-nio-8091-exec-14] INFO  DefaultLogicChain      - rateRange：13
24-12-18.13:47:02.349 [http-nio-8091-exec-14] INFO  DefaultLogicChain      - 生成的key:1
24-12-18.13:47:02.364 [http-nio-8091-exec-14] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:107
24-12-18.13:47:02.364 [http-nio-8091-exec-14] INFO  AbstractRaffleStrategy - rule_default
24-12-18.13:47:02.364 [http-nio-8091-exec-14] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:107
24-12-18.13:47:02.380 [http-nio-8091-exec-14] INFO  StrategyRepository     - 查询出来的规则:tree_lock_1
24-12-18.13:47:02.380 [http-nio-8091-exec-14] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_lock_1
24-12-18.13:47:02.419 [http-nio-8091-exec-14] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=1, treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleKey=rule_lock, createTime=Sat Jan 27 18:01:59 CST 2024, updateTime=Thu Feb 15 15:49:59 CST 2024)
24-12-18.13:47:02.419 [http-nio-8091-exec-14] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=1, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.13:47:02.419 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=1, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.13:47:02.419 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.13:47:02.419 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.13:47:02.419 [http-nio-8091-exec-14] INFO  RuleLockLogicTreeNode  - 策略树--次数锁规则：开始处理
24-12-18.13:47:02.419 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.13:47:02.419 [http-nio-8091-exec-14] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.13:47:02.419 [http-nio-8091-exec-14] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:107 strategyId:100006
24-12-18.13:47:02.487 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.13:47:02.487 [http-nio-8091-exec-14] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.13:47:02.487 [http-nio-8091-exec-14] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.13:47:02.487 [http-nio-8091-exec-14] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.13:47:02.502 [http-nio-8091-exec-14] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.13:47:02.502 [http-nio-8091-exec-14] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.13:47:02.502 [http-nio-8091-exec-14] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.13:47:05.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:47:09.433 [http-nio-8091-exec-16] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.13:47:09.433 [http-nio-8091-exec-16] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.13:47:09.445 [http-nio-8091-exec-16] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.13:47:09.458 [http-nio-8091-exec-16] INFO  DefaultLogicChain      - rateRange：13
24-12-18.13:47:09.458 [http-nio-8091-exec-16] INFO  DefaultLogicChain      - 生成的key:4
24-12-18.13:47:09.474 [http-nio-8091-exec-16] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:106
24-12-18.13:47:09.474 [http-nio-8091-exec-16] INFO  AbstractRaffleStrategy - rule_default
24-12-18.13:47:09.474 [http-nio-8091-exec-16] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:106
24-12-18.13:47:09.489 [http-nio-8091-exec-16] INFO  StrategyRepository     - 查询出来的规则:tree_lock_1
24-12-18.13:47:09.489 [http-nio-8091-exec-16] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_lock_1
24-12-18.13:47:09.514 [http-nio-8091-exec-16] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=1, treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleKey=rule_lock, createTime=Sat Jan 27 18:01:59 CST 2024, updateTime=Thu Feb 15 15:49:59 CST 2024)
24-12-18.13:47:09.514 [http-nio-8091-exec-16] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=1, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.13:47:09.514 [http-nio-8091-exec-16] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=1, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.13:47:09.514 [http-nio-8091-exec-16] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.13:47:09.514 [http-nio-8091-exec-16] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.13:47:09.514 [http-nio-8091-exec-16] INFO  RuleLockLogicTreeNode  - 策略树--次数锁规则：开始处理
24-12-18.13:47:09.514 [http-nio-8091-exec-16] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.13:47:09.514 [http-nio-8091-exec-16] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.13:47:09.514 [http-nio-8091-exec-16] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:106 strategyId:100006
24-12-18.13:47:09.530 [http-nio-8091-exec-16] INFO  StrategyRepository     - 策略奖品库存加锁失败：strategy_award_count_key_100006_106_99
24-12-18.13:47:09.530 [http-nio-8091-exec-16] INFO  RuleStockLogicTreeNode - 库存扣减失败: userId:system,awardId:106 strategyId:100006
24-12-18.13:47:09.530 [http-nio-8091-exec-16] INFO  IRaffleServiceController - 获得随机抽奖奖品接口失败--strategyId:100006
24-12-18.13:47:10.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:47:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:47:20.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:47:25.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:47:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:47:35.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:47:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:47:45.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:47:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:47:55.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:48:00.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:48:05.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:48:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:48:15.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:48:20.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:48:25.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:48:30.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:48:35.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:48:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:48:45.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:48:50.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:48:55.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:49:00.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:49:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:49:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:49:15.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:49:20.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:49:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:49:30.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:49:35.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:49:40.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:49:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:49:50.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:49:55.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:50:00.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:50:05.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:50:10.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:50:15.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:50:20.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:50:25.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:50:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:50:35.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:50:40.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:50:45.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:50:50.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:50:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:51:00.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:51:05.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:51:10.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:51:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:51:20.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:51:25.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:58:52.892 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.RedisResponseTimeoutException: Redis server response timeout (3000 ms) occured after 0 retry attempts, is non-idempotent command: true Check connection with Redis node: 42.194.241.83/42.194.241.83:16379 for TCP packet drops or bandwidth limits.  Try to increase nettyThreads and/or timeout settings. Command: (LPOP), params: [strategy_award_count_query_key], channel: [id: 0x165d1cad, L:/10.152.163.235:54276 - R:42.194.241.83/42.194.241.83:16379]
	at org.redisson.command.RedisExecutor.lambda$scheduleResponseTimeout$9(RedisExecutor.java:407)
	at io.netty.util.HashedWheelTimer$HashedWheelTimeout.run(HashedWheelTimer.java:715)
	at io.netty.util.concurrent.ImmediateExecutor.execute(ImmediateExecutor.java:34)
	at io.netty.util.HashedWheelTimer$HashedWheelTimeout.expire(HashedWheelTimer.java:703)
	at io.netty.util.HashedWheelTimer$HashedWheelBucket.expireTimeouts(HashedWheelTimer.java:790)
	at io.netty.util.HashedWheelTimer$Worker.run(HashedWheelTimer.java:503)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
24-12-18.13:58:55.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:58:56.655 [redisson-netty-2-2] ERROR ErrorsLoggingHandler   - Exception occured. Channel: [id: 0xdf205b94, L:/10.152.163.235:54274 - R:42.194.241.83/42.194.241.83:16379]
java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.read0(Native Method)
	at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:43)
	at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)
	at sun.nio.ch.IOUtil.read(IOUtil.java:192)
	at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:379)
	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:256)
	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
	at io.netty.buffer.WrappedByteBuf.writeBytes(WrappedByteBuf.java:821)
	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:357)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
24-12-18.13:58:56.656 [redisson-netty-2-8] ERROR ErrorsLoggingHandler   - Exception occured. Channel: [id: 0xef22dc79, L:/10.152.163.235:54277 - R:42.194.241.83/42.194.241.83:16379]
java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.read0(Native Method)
	at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:43)
	at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)
	at sun.nio.ch.IOUtil.read(IOUtil.java:192)
	at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:379)
	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:256)
	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:357)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
24-12-18.13:58:56.655 [redisson-netty-2-3] ERROR ErrorsLoggingHandler   - Exception occured. Channel: [id: 0xde7d02d1, L:/10.152.163.235:54275 - R:42.194.241.83/42.194.241.83:16379]
java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.read0(Native Method)
	at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:43)
	at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)
	at sun.nio.ch.IOUtil.read(IOUtil.java:192)
	at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:379)
	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:256)
	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:357)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
24-12-18.13:58:56.656 [redisson-netty-2-10] ERROR ErrorsLoggingHandler   - Exception occured. Channel: [id: 0xfeb70872, L:/10.152.163.235:54278 - R:42.194.241.83/42.194.241.83:16379]
java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.read0(Native Method)
	at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:43)
	at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)
	at sun.nio.ch.IOUtil.read(IOUtil.java:192)
	at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:379)
	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:256)
	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:357)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
24-12-18.13:58:56.656 [redisson-netty-2-6] ERROR ErrorsLoggingHandler   - Exception occured. Channel: [id: 0x165d1cad, L:/10.152.163.235:54276 - R:42.194.241.83/42.194.241.83:16379]
java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.read0(Native Method)
	at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:43)
	at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)
	at sun.nio.ch.IOUtil.read(IOUtil.java:192)
	at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:379)
	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:256)
	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:357)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
24-12-18.13:58:56.656 [redisson-netty-2-12] ERROR ErrorsLoggingHandler   - Exception occured. Channel: [id: 0x362adc1b, L:/10.152.163.235:54279 - R:42.194.241.83/42.194.241.83:16379]
java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.read0(Native Method)
	at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:43)
	at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)
	at sun.nio.ch.IOUtil.read(IOUtil.java:192)
	at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:379)
	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:256)
	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:357)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
24-12-18.13:58:58.018 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.RedisResponseTimeoutException: Redis server response timeout (3000 ms) occured after 0 retry attempts, is non-idempotent command: true Check connection with Redis node: 42.194.241.83/42.194.241.83:16379 for TCP packet drops or bandwidth limits.  Try to increase nettyThreads and/or timeout settings. Command: (LPOP), params: [strategy_award_count_query_key], channel: [id: 0x070c5263, L:/10.156.3.235:55077 - R:42.194.241.83/42.194.241.83:16379]
	at org.redisson.command.RedisExecutor.lambda$scheduleResponseTimeout$9(RedisExecutor.java:407)
	at io.netty.util.HashedWheelTimer$HashedWheelTimeout.run(HashedWheelTimer.java:715)
	at io.netty.util.concurrent.ImmediateExecutor.execute(ImmediateExecutor.java:34)
	at io.netty.util.HashedWheelTimer$HashedWheelTimeout.expire(HashedWheelTimer.java:703)
	at io.netty.util.HashedWheelTimer$HashedWheelBucket.expireTimeouts(HashedWheelTimer.java:790)
	at io.netty.util.HashedWheelTimer$Worker.run(HashedWheelTimer.java:503)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
24-12-18.13:59:00.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:59:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:59:10.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:59:14.856 [HikariPool-1 housekeeper] WARN  HikariPool             - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=7m55s544ms335µs900ns).
24-12-18.13:59:15.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.13:59:17.487 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-12-18.13:59:17.519 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-12-18.14:25:29.465 [main            ] INFO  Application            - Starting Application using Java 1.8.0_432 on LAPTOP-FJDJGS3U with PID 24404 (D:\java\demoTest\s-pay-mall-mvc-241001-xfg-order-pay 2\ddd-103\ddd-103-app\target\classes started by 程宇乐 in D:\java\demoTest\s-pay-mall-mvc-241001-xfg-order-pay 2\ddd-103)
24-12-18.14:25:29.467 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-12-18.14:25:30.443 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-12-18.14:25:30.447 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-12-18.14:25:30.488 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
24-12-18.14:25:31.059 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-12-18.14:25:31.059 [main            ] INFO  AprLifecycleListener   - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
24-12-18.14:25:31.061 [main            ] INFO  AprLifecycleListener   - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
24-12-18.14:25:31.061 [main            ] INFO  AprLifecycleListener   - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
24-12-18.14:25:31.077 [main            ] INFO  AprLifecycleListener   - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
24-12-18.14:25:31.085 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-12-18.14:25:31.086 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-12-18.14:25:31.086 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-12-18.14:25:31.216 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-12-18.14:25:31.216 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1711 ms
24-12-18.14:25:31.883 [main            ] INFO  Version                - Redisson 3.23.4
24-12-18.14:25:32.428 [redisson-netty-2-5] INFO  MasterPubSubConnectionPool - 1 connections initialized for 42.194.241.83/42.194.241.83:16379
24-12-18.14:25:32.512 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 42.194.241.83/42.194.241.83:16379
24-12-18.14:25:33.379 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-12-18.14:25:33.414 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-12-18.14:25:33.428 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-12-18.14:25:33.447 [main            ] INFO  Application            - Started Application in 4.613 seconds (JVM running for 6.197)
24-12-18.14:25:34.383 [RMI TCP Connection(2)-2.0.0.1] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-12-18.14:25:34.383 [RMI TCP Connection(2)-2.0.0.1] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-12-18.14:25:34.386 [RMI TCP Connection(2)-2.0.0.1] INFO  DispatcherServlet      - Completed initialization in 3 ms
24-12-18.14:25:34.393 [RMI TCP Connection(3)-2.0.0.1] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-12-18.14:25:35.056 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:25:35.131 [RMI TCP Connection(3)-2.0.0.1] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-12-18.14:25:37.532 [http-nio-8091-exec-2] INFO  IRaffleServiceController - 奖品列表查询接口开始--strategyId:100006
24-12-18.14:25:37.552 [http-nio-8091-exec-2] INFO  IRaffleServiceController - 奖品列表查询接口成功--strategyId:100006
24-12-18.14:25:38.800 [http-nio-8091-exec-10] INFO  IRaffleServiceController - 抽奖策略装配接口开始--strategyId:100006
24-12-18.14:25:38.800 [http-nio-8091-exec-10] INFO  StrategyArmory         - a
24-12-18.14:25:39.087 [http-nio-8091-exec-10] INFO  StrategyArmory         - StrategyEntity:StrategyEntity(strategyId=100006, strategyDesc=抽奖策略-规则树, ruleModels=null)
24-12-18.14:25:39.087 [http-nio-8091-exec-10] INFO  IRaffleServiceController - 策略装配接口完成
24-12-18.14:25:40.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:25:40.074 [http-nio-8091-exec-12] INFO  IRaffleServiceController - 抽奖策略装配接口开始--strategyId:100006
24-12-18.14:25:40.074 [http-nio-8091-exec-12] INFO  StrategyArmory         - a
24-12-18.14:25:40.299 [http-nio-8091-exec-12] INFO  StrategyArmory         - StrategyEntity:StrategyEntity(strategyId=100006, strategyDesc=抽奖策略-规则树, ruleModels=null)
24-12-18.14:25:40.300 [http-nio-8091-exec-12] INFO  IRaffleServiceController - 策略装配接口完成
24-12-18.14:25:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:25:47.627 [http-nio-8091-exec-6] INFO  IRaffleServiceController - 抽奖策略装配接口开始--strategyId:100006
24-12-18.14:25:47.627 [http-nio-8091-exec-6] INFO  StrategyArmory         - a
24-12-18.14:25:47.879 [http-nio-8091-exec-6] INFO  StrategyArmory         - StrategyEntity:StrategyEntity(strategyId=100006, strategyDesc=抽奖策略-规则树, ruleModels=null)
24-12-18.14:25:47.879 [http-nio-8091-exec-6] INFO  IRaffleServiceController - 策略装配接口完成
24-12-18.14:25:50.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:25:55.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:26:00.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:26:05.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:26:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:26:11.444 [http-nio-8091-exec-7] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.14:26:11.451 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.14:26:11.466 [http-nio-8091-exec-7] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.14:26:11.482 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - rateRange：13
24-12-18.14:26:11.482 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 生成的key:8
24-12-18.14:26:11.496 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:108
24-12-18.14:26:11.498 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - rule_default
24-12-18.14:26:11.498 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:108
24-12-18.14:26:11.612 [http-nio-8091-exec-7] INFO  StrategyRepository     - 查询出来的规则:tree_lock_2
24-12-18.14:26:11.612 [http-nio-8091-exec-7] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_lock_2
24-12-18.14:26:11.673 [http-nio-8091-exec-7] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=3, treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleKey=rule_lock, createTime=Sat Jan 27 18:01:59 CST 2024, updateTime=Thu Feb 15 15:49:59 CST 2024)
24-12-18.14:26:11.673 [http-nio-8091-exec-7] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=2, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.14:26:11.673 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=2, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.14:26:11.673 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.14:26:11.673 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.14:26:11.673 [http-nio-8091-exec-7] INFO  RuleLockLogicTreeNode  - 策略树--次数锁规则：开始处理
24-12-18.14:26:11.673 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.14:26:11.673 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.14:26:11.673 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:108 strategyId:100006
24-12-18.14:26:11.762 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.14:26:11.762 [http-nio-8091-exec-7] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.14:26:11.762 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.14:26:11.762 [http-nio-8091-exec-7] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.14:26:11.805 [http-nio-8091-exec-7] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.14:26:11.805 [http-nio-8091-exec-7] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.14:26:15.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:26:15.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.14:26:20.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:26:25.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:26:30.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:26:35.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:26:40.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:26:45.017 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:26:50.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:26:55.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:27:00.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:27:05.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:27:10.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:27:15.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:27:20.022 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:27:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:27:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:27:35.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:27:40.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:27:45.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:27:50.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:27:55.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:28:00.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:28:05.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:28:10.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:28:15.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:28:20.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:28:23.602 [http-nio-8091-exec-4] INFO  IRaffleServiceController - 奖品列表查询接口开始--strategyId:100006
24-12-18.14:28:23.612 [http-nio-8091-exec-4] INFO  IRaffleServiceController - 奖品列表查询接口成功--strategyId:100006
24-12-18.14:28:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:28:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:28:35.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:28:40.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:28:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:28:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:28:55.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:29:00.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:29:05.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:29:10.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:29:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:29:20.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:29:25.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:29:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:29:35.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:29:40.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:29:45.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:29:50.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:29:55.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:30:00.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:30:05.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:30:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:30:15.027 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:30:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:30:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:30:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:30:35.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:30:40.017 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:30:45.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:30:50.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:30:55.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:00.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:05.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:25.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:28.317 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@1308546123 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xfb0b05d4, L:0.0.0.0/0.0.0.0:58182], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:31:30.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:33.314 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@1366270195 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0x5588bead, L:0.0.0.0/0.0.0.0:58187], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:31:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:38.310 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@563865459 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xe9fbea02, L:0.0.0.0/0.0.0.0:58186], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:31:40.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:43.309 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@136771271 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xe771387f, L:0.0.0.0/0.0.0.0:58185], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:31:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:48.211 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@2025479277 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xc59eac73, L:0.0.0.0/0.0.0.0:58184], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:31:50.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:53.218 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@1308546123 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xfb0b05d4, L:0.0.0.0/0.0.0.0:58182], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:31:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:31:58.213 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@1366270195 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0x5588bead, L:0.0.0.0/0.0.0.0:58187], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:32:00.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:32:03.308 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@563865459 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xe9fbea02, L:0.0.0.0/0.0.0.0:58186], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:32:05.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:32:08.311 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@136771271 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xe771387f, L:0.0.0.0/0.0.0.0:58185], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:32:10.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:32:13.308 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@2025479277 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xc59eac73, L:0.0.0.0/0.0.0.0:58184], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:32:15.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:32:18.218 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@1308546123 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xfb0b05d4, L:0.0.0.0/0.0.0.0:58182], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:32:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:32:23.308 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@1366270195 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0x5588bead, L:0.0.0.0/0.0.0.0:58187], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:32:25.017 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:32:28.320 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@563865459 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xe9fbea02, L:0.0.0.0/0.0.0.0:58186], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:32:30.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:32:33.309 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@136771271 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xe771387f, L:0.0.0.0/0.0.0.0:58185], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:32:35.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:32:38.307 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@2025479277 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xc59eac73, L:0.0.0.0/0.0.0.0:58184], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:32:40.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.14:32:43.314 [scheduling-1    ] ERROR UpdateAwardStockJob    - 定时任务，更新奖品消耗库存失败
org.redisson.client.WriteRedisConnectionException: Unable to write command into connection! Increase nettyThreads setting. Node source: NodeSource [slot=0, addr=null, redisClient=null, redirect=null, entry=null], connection: RedisConnection@1308546123 [redisClient=[addr=redis://42.194.241.83:16379], channel=[id: 0xfb0b05d4, L:0.0.0.0/0.0.0.0:58182], currentCommand=null, usage=1], command: (LPOP), params: [strategy_award_count_query_key] after 3 retry attempts
	at org.redisson.command.RedisExecutor.checkWriteFuture(RedisExecutor.java:345)
	at org.redisson.command.RedisExecutor.lambda$execute$3(RedisExecutor.java:188)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(AbstractChannel.java:860)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.write(DefaultChannelPipeline.java:1367)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:877)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)
	at io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
Caused by: io.netty.channel.StacklessClosedChannelException: null
	at io.netty.channel.AbstractChannel$AbstractUnsafe.write(Object, ChannelPromise)(Unknown Source)
24-12-18.14:32:44.520 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-12-18.17:09:32.826 [main            ] INFO  Application            - Starting Application using Java 1.8.0_432 on LAPTOP-FJDJGS3U with PID 6104 (D:\java\demoTest\s-pay-mall-mvc-241001-xfg-order-pay 2\ddd-103\ddd-103-app\target\classes started by 程宇乐 in D:\java\demoTest\s-pay-mall-mvc-241001-xfg-order-pay 2\ddd-103)
24-12-18.17:09:32.830 [main            ] INFO  Application            - The following 1 profile is active: "prod"
24-12-18.17:09:36.931 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-12-18.17:09:36.941 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-12-18.17:09:37.124 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 82 ms. Found 0 Redis repository interfaces.
24-12-18.17:09:43.390 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-12-18.17:09:43.392 [main            ] INFO  AprLifecycleListener   - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
24-12-18.17:09:43.393 [main            ] INFO  AprLifecycleListener   - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
24-12-18.17:09:43.393 [main            ] INFO  AprLifecycleListener   - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
24-12-18.17:09:43.450 [main            ] INFO  AprLifecycleListener   - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
24-12-18.17:09:43.472 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-12-18.17:09:43.473 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-12-18.17:09:43.473 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-12-18.17:09:44.480 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-12-18.17:09:44.483 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 11496 ms
24-12-18.17:09:56.239 [main            ] INFO  Version                - Redisson 3.23.4
24-12-18.17:09:58.483 [redisson-netty-2-4] INFO  MasterPubSubConnectionPool - 1 connections initialized for 42.194.241.83/42.194.241.83:16379
24-12-18.17:09:58.601 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 42.194.241.83/42.194.241.83:16379
24-12-18.17:10:27.727 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-12-18.17:10:27.822 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-12-18.17:10:27.862 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-12-18.17:10:27.914 [main            ] INFO  Application            - Started Application in 58.895 seconds (JVM running for 65.775)
24-12-18.17:10:28.236 [RMI TCP Connection(2)-2.0.0.1] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-12-18.17:10:28.237 [RMI TCP Connection(2)-2.0.0.1] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-12-18.17:10:28.241 [RMI TCP Connection(1)-2.0.0.1] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-12-18.17:10:28.242 [RMI TCP Connection(2)-2.0.0.1] INFO  DispatcherServlet      - Completed initialization in 4 ms
24-12-18.17:10:29.849 [RMI TCP Connection(1)-2.0.0.1] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-12-18.17:10:30.017 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:10:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:10:40.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:10:45.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:10:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:10:55.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:11:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:11:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:11:10.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:11:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:11:20.127 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:11:25.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:11:30.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:11:35.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:11:40.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:11:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:11:50.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:11:55.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:12:00.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:12:05.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:12:10.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:12:15.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:12:20.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:12:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:12:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:12:32.330 [http-nio-8091-exec-1] INFO  IRaffleServiceController - 奖品列表查询接口开始--strategyId:0
24-12-18.17:12:32.500 [http-nio-8091-exec-1] INFO  IRaffleServiceController - 奖品列表查询接口成功--strategyId:0
24-12-18.17:12:35.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:12:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:12:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:12:49.356 [http-nio-8091-exec-4] INFO  IRaffleServiceController - 奖品列表查询接口开始--strategyId:100006
24-12-18.17:12:49.381 [http-nio-8091-exec-4] INFO  IRaffleServiceController - 奖品列表查询接口成功--strategyId:100006
24-12-18.17:12:50.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:12:53.715 [http-nio-8091-exec-5] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:12:53.717 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:12:53.732 [http-nio-8091-exec-5] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:12:53.741 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:12:53.742 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 生成的key:3
24-12-18.17:12:53.756 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:103
24-12-18.17:12:53.758 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:12:53.762 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:103
24-12-18.17:12:53.786 [http-nio-8091-exec-5] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.17:12:53.789 [http-nio-8091-exec-5] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.17:12:53.845 [http-nio-8091-exec-5] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.17:12:53.848 [http-nio-8091-exec-5] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:12:53.850 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:12:53.852 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:12:53.852 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:12:53.852 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:12:53.852 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:103 strategyId:100006
24-12-18.17:12:53.872 [http-nio-8091-exec-5] INFO  StrategyRepository     - 策略奖品库存加锁失败：strategy_award_count_key_100006_103_97
24-12-18.17:12:53.872 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 库存扣减失败: userId:system,awardId:103 strategyId:100006
24-12-18.17:12:53.878 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:12:53.878 [http-nio-8091-exec-5] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:12:53.880 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:12:53.881 [http-nio-8091-exec-5] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:12:53.892 [http-nio-8091-exec-5] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:12:53.895 [http-nio-8091-exec-5] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:12:53.900 [http-nio-8091-exec-5] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:12:55.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:13:00.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:13:03.510 [http-nio-8091-exec-6] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:13:03.510 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:13:03.523 [http-nio-8091-exec-6] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:13:03.533 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:13:03.533 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 生成的key:0
24-12-18.17:13:03.542 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:105
24-12-18.17:13:03.543 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:13:03.543 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:105
24-12-18.17:13:03.565 [http-nio-8091-exec-6] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.17:13:03.565 [http-nio-8091-exec-6] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.17:13:03.595 [http-nio-8091-exec-6] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.17:13:03.596 [http-nio-8091-exec-6] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:03.596 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:03.596 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:13:03.596 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:13:03.596 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:13:03.596 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:105 strategyId:100006
24-12-18.17:13:03.612 [http-nio-8091-exec-6] INFO  StrategyRepository     - 策略奖品库存加锁失败：strategy_award_count_key_100006_105_99
24-12-18.17:13:03.612 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 库存扣减失败: userId:system,awardId:105 strategyId:100006
24-12-18.17:13:03.612 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:13:03.613 [http-nio-8091-exec-6] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:13:03.613 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:13:03.613 [http-nio-8091-exec-6] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:13:03.622 [http-nio-8091-exec-6] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:13:03.622 [http-nio-8091-exec-6] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:13:03.622 [http-nio-8091-exec-6] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:13:05.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:13:10.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:13:10.668 [http-nio-8091-exec-7] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:13:10.670 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:13:10.681 [http-nio-8091-exec-7] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:13:10.691 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:13:10.691 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 生成的key:4
24-12-18.17:13:10.700 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:108
24-12-18.17:13:10.700 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:13:10.700 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:108
24-12-18.17:13:10.717 [http-nio-8091-exec-7] INFO  StrategyRepository     - 查询出来的规则:tree_lock_2
24-12-18.17:13:10.718 [http-nio-8091-exec-7] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_lock_2
24-12-18.17:13:10.748 [http-nio-8091-exec-7] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=3, treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleKey=rule_lock, createTime=Sat Jan 27 18:01:59 CST 2024, updateTime=Thu Feb 15 15:49:59 CST 2024)
24-12-18.17:13:10.748 [http-nio-8091-exec-7] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=2, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:10.748 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=2, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:10.748 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:13:10.748 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:13:10.748 [http-nio-8091-exec-7] INFO  RuleLockLogicTreeNode  - 策略树--次数锁规则：开始处理
24-12-18.17:13:10.750 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:13:10.750 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:13:10.750 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:108 strategyId:100006
24-12-18.17:13:10.825 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:13:10.825 [http-nio-8091-exec-7] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:13:10.825 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:13:10.825 [http-nio-8091-exec-7] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:13:10.835 [http-nio-8091-exec-7] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:13:10.835 [http-nio-8091-exec-7] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:13:10.835 [http-nio-8091-exec-7] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:13:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:13:15.017 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.17:13:17.616 [http-nio-8091-exec-10] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:13:17.616 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:13:17.625 [http-nio-8091-exec-10] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:13:17.633 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:13:17.633 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 生成的key:0
24-12-18.17:13:17.643 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:105
24-12-18.17:13:17.643 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:13:17.643 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:105
24-12-18.17:13:17.662 [http-nio-8091-exec-10] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.17:13:17.662 [http-nio-8091-exec-10] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.17:13:17.692 [http-nio-8091-exec-10] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.17:13:17.693 [http-nio-8091-exec-10] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:17.693 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:17.693 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:13:17.693 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:13:17.693 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:13:17.693 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:105 strategyId:100006
24-12-18.17:13:17.710 [http-nio-8091-exec-10] INFO  StrategyRepository     - 策略奖品库存加锁失败：strategy_award_count_key_100006_105_98
24-12-18.17:13:17.710 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 库存扣减失败: userId:system,awardId:105 strategyId:100006
24-12-18.17:13:17.710 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:13:17.710 [http-nio-8091-exec-10] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:13:17.710 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:13:17.710 [http-nio-8091-exec-10] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:13:17.722 [http-nio-8091-exec-10] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:13:17.722 [http-nio-8091-exec-10] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:13:17.722 [http-nio-8091-exec-10] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:13:20.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:13:24.447 [http-nio-8091-exec-8] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:13:24.447 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:13:24.459 [http-nio-8091-exec-8] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:13:24.471 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:13:24.471 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 生成的key:9
24-12-18.17:13:24.484 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:107
24-12-18.17:13:24.484 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:13:24.484 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:107
24-12-18.17:13:24.511 [http-nio-8091-exec-8] INFO  StrategyRepository     - 查询出来的规则:tree_lock_1
24-12-18.17:13:24.511 [http-nio-8091-exec-8] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_lock_1
24-12-18.17:13:24.561 [http-nio-8091-exec-8] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=1, treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleKey=rule_lock, createTime=Sat Jan 27 18:01:59 CST 2024, updateTime=Thu Feb 15 15:49:59 CST 2024)
24-12-18.17:13:24.562 [http-nio-8091-exec-8] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=1, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:24.562 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=1, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:24.562 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:13:24.562 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:13:24.562 [http-nio-8091-exec-8] INFO  RuleLockLogicTreeNode  - 策略树--次数锁规则：开始处理
24-12-18.17:13:24.562 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:13:24.562 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:13:24.562 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:107 strategyId:100006
24-12-18.17:13:24.611 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:13:24.612 [http-nio-8091-exec-8] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:13:24.612 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:13:24.612 [http-nio-8091-exec-8] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:13:24.624 [http-nio-8091-exec-8] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:13:24.624 [http-nio-8091-exec-8] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:13:24.624 [http-nio-8091-exec-8] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:13:25.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:13:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:13:30.025 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.17:13:31.560 [http-nio-8091-exec-9] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:13:31.560 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:13:31.578 [http-nio-8091-exec-9] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:13:31.593 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:13:31.593 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 生成的key:7
24-12-18.17:13:31.600 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:101
24-12-18.17:13:31.602 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:13:31.602 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:101
24-12-18.17:13:31.639 [http-nio-8091-exec-9] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.17:13:31.640 [http-nio-8091-exec-9] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.17:13:31.694 [http-nio-8091-exec-9] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.17:13:31.694 [http-nio-8091-exec-9] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:31.694 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:31.694 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:13:31.694 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:13:31.694 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:13:31.694 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:101 strategyId:100006
24-12-18.17:13:31.740 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:101
24-12-18.17:13:31.740 [http-nio-8091-exec-9] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_101
24-12-18.17:13:31.802 [http-nio-8091-exec-9] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:13:31.802 [http-nio-8091-exec-9] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:101 awardIndex:1
24-12-18.17:13:35.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:13:35.021 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.17:13:40.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:13:45.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:13:45.495 [http-nio-8091-exec-17] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:13:45.495 [http-nio-8091-exec-17] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:13:45.506 [http-nio-8091-exec-17] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:13:45.520 [http-nio-8091-exec-17] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:13:45.521 [http-nio-8091-exec-17] INFO  DefaultLogicChain      - 生成的key:2
24-12-18.17:13:45.530 [http-nio-8091-exec-17] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:105
24-12-18.17:13:45.530 [http-nio-8091-exec-17] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:13:45.530 [http-nio-8091-exec-17] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:105
24-12-18.17:13:45.548 [http-nio-8091-exec-17] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.17:13:45.548 [http-nio-8091-exec-17] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.17:13:45.590 [http-nio-8091-exec-17] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.17:13:45.590 [http-nio-8091-exec-17] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:45.590 [http-nio-8091-exec-17] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:45.590 [http-nio-8091-exec-17] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:13:45.590 [http-nio-8091-exec-17] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:13:45.590 [http-nio-8091-exec-17] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:13:45.590 [http-nio-8091-exec-17] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:105 strategyId:100006
24-12-18.17:13:45.618 [http-nio-8091-exec-17] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:105
24-12-18.17:13:45.618 [http-nio-8091-exec-17] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_105
24-12-18.17:13:45.627 [http-nio-8091-exec-17] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=105, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=5, awardTitle=4等奖, awardSubtitle=null)
24-12-18.17:13:45.627 [http-nio-8091-exec-17] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:13:45.627 [http-nio-8091-exec-17] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:105 awardIndex:5
24-12-18.17:13:50.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:13:50.026 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.17:13:52.570 [http-nio-8091-exec-12] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:13:52.570 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:13:52.580 [http-nio-8091-exec-12] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:13:52.587 [http-nio-8091-exec-12] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:13:52.587 [http-nio-8091-exec-12] INFO  DefaultLogicChain      - 生成的key:1
24-12-18.17:13:52.597 [http-nio-8091-exec-12] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:108
24-12-18.17:13:52.598 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:13:52.598 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:108
24-12-18.17:13:52.623 [http-nio-8091-exec-12] INFO  StrategyRepository     - 查询出来的规则:tree_lock_2
24-12-18.17:13:52.623 [http-nio-8091-exec-12] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_lock_2
24-12-18.17:13:52.660 [http-nio-8091-exec-12] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=3, treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleKey=rule_lock, createTime=Sat Jan 27 18:01:59 CST 2024, updateTime=Thu Feb 15 15:49:59 CST 2024)
24-12-18.17:13:52.660 [http-nio-8091-exec-12] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=2, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:52.661 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=2, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:13:52.661 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:13:52.661 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:13:52.661 [http-nio-8091-exec-12] INFO  RuleLockLogicTreeNode  - 策略树--次数锁规则：开始处理
24-12-18.17:13:52.661 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:13:52.661 [http-nio-8091-exec-12] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:13:52.661 [http-nio-8091-exec-12] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:108 strategyId:100006
24-12-18.17:13:52.689 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:13:52.690 [http-nio-8091-exec-12] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:13:52.690 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:13:52.690 [http-nio-8091-exec-12] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:13:52.708 [http-nio-8091-exec-12] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:13:52.708 [http-nio-8091-exec-12] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:13:52.708 [http-nio-8091-exec-12] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:13:55.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:14:00.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:14:03.636 [http-nio-8091-exec-13] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:14:03.636 [http-nio-8091-exec-13] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:14:03.654 [http-nio-8091-exec-13] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:14:03.668 [http-nio-8091-exec-13] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:14:03.669 [http-nio-8091-exec-13] INFO  DefaultLogicChain      - 生成的key:8
24-12-18.17:14:03.680 [http-nio-8091-exec-13] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:100
24-12-18.17:14:03.680 [http-nio-8091-exec-13] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:14:03.680 [http-nio-8091-exec-13] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:100
24-12-18.17:14:03.712 [http-nio-8091-exec-13] INFO  DefaultRaffleStrategy  - 奖品没有设置规则树
24-12-18.17:14:03.712 [http-nio-8091-exec-13] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:14:03.712 [http-nio-8091-exec-13] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:14:03.725 [http-nio-8091-exec-13] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:14:03.725 [http-nio-8091-exec-13] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:14:03.725 [http-nio-8091-exec-13] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:14:05.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:14:10.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:14:11.163 [http-nio-8091-exec-14] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:14:11.163 [http-nio-8091-exec-14] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:14:11.180 [http-nio-8091-exec-14] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:14:11.193 [http-nio-8091-exec-14] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:14:11.193 [http-nio-8091-exec-14] INFO  DefaultLogicChain      - 生成的key:10
24-12-18.17:14:11.211 [http-nio-8091-exec-14] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:107
24-12-18.17:14:11.211 [http-nio-8091-exec-14] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:14:11.211 [http-nio-8091-exec-14] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:107
24-12-18.17:14:11.228 [http-nio-8091-exec-14] INFO  StrategyRepository     - 查询出来的规则:tree_lock_1
24-12-18.17:14:11.228 [http-nio-8091-exec-14] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_lock_1
24-12-18.17:14:11.273 [http-nio-8091-exec-14] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=1, treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleKey=rule_lock, createTime=Sat Jan 27 18:01:59 CST 2024, updateTime=Thu Feb 15 15:49:59 CST 2024)
24-12-18.17:14:11.273 [http-nio-8091-exec-14] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=1, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:14:11.273 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=1, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:14:11.273 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:14:11.273 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:14:11.273 [http-nio-8091-exec-14] INFO  RuleLockLogicTreeNode  - 策略树--次数锁规则：开始处理
24-12-18.17:14:11.273 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:14:11.273 [http-nio-8091-exec-14] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:14:11.273 [http-nio-8091-exec-14] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:107 strategyId:100006
24-12-18.17:14:11.304 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:14:11.304 [http-nio-8091-exec-14] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:14:11.304 [http-nio-8091-exec-14] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:14:11.304 [http-nio-8091-exec-14] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:14:11.311 [http-nio-8091-exec-14] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:14:11.311 [http-nio-8091-exec-14] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:14:11.311 [http-nio-8091-exec-14] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:14:15.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:14:15.018 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.17:14:18.238 [http-nio-8091-exec-16] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:14:18.238 [http-nio-8091-exec-16] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:14:18.250 [http-nio-8091-exec-16] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:14:18.268 [http-nio-8091-exec-16] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:14:18.268 [http-nio-8091-exec-16] INFO  DefaultLogicChain      - 生成的key:8
24-12-18.17:14:18.283 [http-nio-8091-exec-16] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:100
24-12-18.17:14:18.283 [http-nio-8091-exec-16] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:14:18.283 [http-nio-8091-exec-16] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:100
24-12-18.17:14:18.302 [http-nio-8091-exec-16] INFO  DefaultRaffleStrategy  - 奖品没有设置规则树
24-12-18.17:14:18.302 [http-nio-8091-exec-16] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:14:18.302 [http-nio-8091-exec-16] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:14:18.310 [http-nio-8091-exec-16] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:14:18.310 [http-nio-8091-exec-16] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:14:18.310 [http-nio-8091-exec-16] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:14:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:14:25.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:14:25.608 [http-nio-8091-exec-11] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:14:25.608 [http-nio-8091-exec-11] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:14:25.616 [http-nio-8091-exec-11] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:14:25.630 [http-nio-8091-exec-11] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:14:25.630 [http-nio-8091-exec-11] INFO  DefaultLogicChain      - 生成的key:5
24-12-18.17:14:25.647 [http-nio-8091-exec-11] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:103
24-12-18.17:14:25.647 [http-nio-8091-exec-11] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:14:25.647 [http-nio-8091-exec-11] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:103
24-12-18.17:14:25.672 [http-nio-8091-exec-11] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.17:14:25.672 [http-nio-8091-exec-11] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.17:14:25.738 [http-nio-8091-exec-11] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.17:14:25.738 [http-nio-8091-exec-11] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:14:25.738 [http-nio-8091-exec-11] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:14:25.738 [http-nio-8091-exec-11] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:14:25.738 [http-nio-8091-exec-11] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:14:25.740 [http-nio-8091-exec-11] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:14:25.740 [http-nio-8091-exec-11] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:103 strategyId:100006
24-12-18.17:14:25.769 [http-nio-8091-exec-11] INFO  StrategyRepository     - 策略奖品库存加锁失败：strategy_award_count_key_100006_103_96
24-12-18.17:14:25.769 [http-nio-8091-exec-11] INFO  RuleStockLogicTreeNode - 库存扣减失败: userId:system,awardId:103 strategyId:100006
24-12-18.17:14:25.770 [http-nio-8091-exec-11] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:14:25.770 [http-nio-8091-exec-11] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:14:25.770 [http-nio-8091-exec-11] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:14:25.770 [http-nio-8091-exec-11] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:14:25.798 [http-nio-8091-exec-11] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:14:25.798 [http-nio-8091-exec-11] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:14:25.798 [http-nio-8091-exec-11] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:14:30.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:14:35.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:14:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:14:45.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:14:50.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:14:55.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:15:00.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:15:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:15:10.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:15:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:15:16.567 [http-nio-8091-exec-15] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:15:16.567 [http-nio-8091-exec-15] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:15:16.574 [http-nio-8091-exec-15] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:15:16.583 [http-nio-8091-exec-15] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:15:16.583 [http-nio-8091-exec-15] INFO  DefaultLogicChain      - 生成的key:12
24-12-18.17:15:16.592 [http-nio-8091-exec-15] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:102
24-12-18.17:15:16.592 [http-nio-8091-exec-15] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:15:16.592 [http-nio-8091-exec-15] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:102
24-12-18.17:15:16.610 [http-nio-8091-exec-15] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.17:15:16.612 [http-nio-8091-exec-15] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.17:15:16.643 [http-nio-8091-exec-15] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.17:15:16.643 [http-nio-8091-exec-15] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:15:16.643 [http-nio-8091-exec-15] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:15:16.643 [http-nio-8091-exec-15] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:15:16.643 [http-nio-8091-exec-15] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:15:16.643 [http-nio-8091-exec-15] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:15:16.643 [http-nio-8091-exec-15] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:102 strategyId:100006
24-12-18.17:15:16.658 [http-nio-8091-exec-15] INFO  StrategyRepository     - 策略奖品库存加锁失败：strategy_award_count_key_100006_102_99
24-12-18.17:15:16.658 [http-nio-8091-exec-15] INFO  RuleStockLogicTreeNode - 库存扣减失败: userId:system,awardId:102 strategyId:100006
24-12-18.17:15:16.658 [http-nio-8091-exec-15] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:15:16.658 [http-nio-8091-exec-15] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:15:16.658 [http-nio-8091-exec-15] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:15:16.658 [http-nio-8091-exec-15] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:15:16.668 [http-nio-8091-exec-15] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:15:16.668 [http-nio-8091-exec-15] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:15:16.668 [http-nio-8091-exec-15] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:15:20.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:15:23.193 [http-nio-8091-exec-18] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:15:23.193 [http-nio-8091-exec-18] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:15:23.202 [http-nio-8091-exec-18] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:15:23.210 [http-nio-8091-exec-18] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:15:23.210 [http-nio-8091-exec-18] INFO  DefaultLogicChain      - 生成的key:8
24-12-18.17:15:23.218 [http-nio-8091-exec-18] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:100
24-12-18.17:15:23.218 [http-nio-8091-exec-18] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:15:23.218 [http-nio-8091-exec-18] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:100
24-12-18.17:15:23.237 [http-nio-8091-exec-18] INFO  DefaultRaffleStrategy  - 奖品没有设置规则树
24-12-18.17:15:23.237 [http-nio-8091-exec-18] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:15:23.238 [http-nio-8091-exec-18] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:15:23.246 [http-nio-8091-exec-18] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:15:23.246 [http-nio-8091-exec-18] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:15:23.246 [http-nio-8091-exec-18] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:15:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:15:29.864 [http-nio-8091-exec-19] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:15:29.864 [http-nio-8091-exec-19] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:15:29.871 [http-nio-8091-exec-19] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:15:29.880 [http-nio-8091-exec-19] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:15:29.880 [http-nio-8091-exec-19] INFO  DefaultLogicChain      - 生成的key:8
24-12-18.17:15:29.887 [http-nio-8091-exec-19] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:100
24-12-18.17:15:29.887 [http-nio-8091-exec-19] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:15:29.887 [http-nio-8091-exec-19] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:100
24-12-18.17:15:29.907 [http-nio-8091-exec-19] INFO  DefaultRaffleStrategy  - 奖品没有设置规则树
24-12-18.17:15:29.907 [http-nio-8091-exec-19] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:15:29.908 [http-nio-8091-exec-19] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:15:29.916 [http-nio-8091-exec-19] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:15:29.916 [http-nio-8091-exec-19] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:15:29.916 [http-nio-8091-exec-19] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:15:30.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:15:35.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:15:36.608 [http-nio-8091-exec-20] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:15:36.608 [http-nio-8091-exec-20] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:15:36.616 [http-nio-8091-exec-20] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:15:36.623 [http-nio-8091-exec-20] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:15:36.623 [http-nio-8091-exec-20] INFO  DefaultLogicChain      - 生成的key:2
24-12-18.17:15:36.632 [http-nio-8091-exec-20] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:105
24-12-18.17:15:36.632 [http-nio-8091-exec-20] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:15:36.632 [http-nio-8091-exec-20] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:105
24-12-18.17:15:36.652 [http-nio-8091-exec-20] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.17:15:36.652 [http-nio-8091-exec-20] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.17:15:36.684 [http-nio-8091-exec-20] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.17:15:36.684 [http-nio-8091-exec-20] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:15:36.686 [http-nio-8091-exec-20] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:15:36.686 [http-nio-8091-exec-20] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:15:36.686 [http-nio-8091-exec-20] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:15:36.686 [http-nio-8091-exec-20] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:15:36.686 [http-nio-8091-exec-20] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:105 strategyId:100006
24-12-18.17:15:36.712 [http-nio-8091-exec-20] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:105
24-12-18.17:15:36.712 [http-nio-8091-exec-20] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_105
24-12-18.17:15:36.735 [http-nio-8091-exec-20] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=105, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=5, awardTitle=4等奖, awardSubtitle=null)
24-12-18.17:15:36.735 [http-nio-8091-exec-20] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:15:36.735 [http-nio-8091-exec-20] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:105 awardIndex:5
24-12-18.17:15:40.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:15:40.020 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.17:15:45.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:15:50.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:15:50.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.17:15:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:16:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:16:03.570 [http-nio-8091-exec-21] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:16:03.570 [http-nio-8091-exec-21] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:16:03.578 [http-nio-8091-exec-21] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:16:03.586 [http-nio-8091-exec-21] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:16:03.586 [http-nio-8091-exec-21] INFO  DefaultLogicChain      - 生成的key:2
24-12-18.17:16:03.594 [http-nio-8091-exec-21] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:105
24-12-18.17:16:03.594 [http-nio-8091-exec-21] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:16:03.594 [http-nio-8091-exec-21] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:105
24-12-18.17:16:03.616 [http-nio-8091-exec-21] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.17:16:03.616 [http-nio-8091-exec-21] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.17:16:03.644 [http-nio-8091-exec-21] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.17:16:03.644 [http-nio-8091-exec-21] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:16:03.644 [http-nio-8091-exec-21] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:16:03.644 [http-nio-8091-exec-21] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:16:03.644 [http-nio-8091-exec-21] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:16:03.644 [http-nio-8091-exec-21] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:16:03.644 [http-nio-8091-exec-21] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:105 strategyId:100006
24-12-18.17:16:03.670 [http-nio-8091-exec-21] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:105
24-12-18.17:16:03.670 [http-nio-8091-exec-21] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_105
24-12-18.17:16:03.678 [http-nio-8091-exec-21] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=105, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=5, awardTitle=4等奖, awardSubtitle=null)
24-12-18.17:16:03.678 [http-nio-8091-exec-21] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:16:03.678 [http-nio-8091-exec-21] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:105 awardIndex:5
24-12-18.17:16:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:16:10.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:16:10.025 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.17:16:11.181 [http-nio-8091-exec-22] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:16:11.181 [http-nio-8091-exec-22] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:16:11.189 [http-nio-8091-exec-22] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:16:11.198 [http-nio-8091-exec-22] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:16:11.198 [http-nio-8091-exec-22] INFO  DefaultLogicChain      - 生成的key:5
24-12-18.17:16:11.206 [http-nio-8091-exec-22] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:103
24-12-18.17:16:11.206 [http-nio-8091-exec-22] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:16:11.206 [http-nio-8091-exec-22] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:103
24-12-18.17:16:11.224 [http-nio-8091-exec-22] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.17:16:11.225 [http-nio-8091-exec-22] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.17:16:11.273 [http-nio-8091-exec-22] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.17:16:11.273 [http-nio-8091-exec-22] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:16:11.273 [http-nio-8091-exec-22] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:16:11.273 [http-nio-8091-exec-22] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:16:11.273 [http-nio-8091-exec-22] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:16:11.273 [http-nio-8091-exec-22] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:16:11.273 [http-nio-8091-exec-22] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:103 strategyId:100006
24-12-18.17:16:11.289 [http-nio-8091-exec-22] INFO  StrategyRepository     - 策略奖品库存加锁失败：strategy_award_count_key_100006_103_95
24-12-18.17:16:11.289 [http-nio-8091-exec-22] INFO  RuleStockLogicTreeNode - 库存扣减失败: userId:system,awardId:103 strategyId:100006
24-12-18.17:16:11.289 [http-nio-8091-exec-22] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:16:11.289 [http-nio-8091-exec-22] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:16:11.289 [http-nio-8091-exec-22] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:16:11.289 [http-nio-8091-exec-22] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:16:11.297 [http-nio-8091-exec-22] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:16:11.297 [http-nio-8091-exec-22] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:16:11.297 [http-nio-8091-exec-22] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:16:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:16:20.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:16:25.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:16:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:16:35.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:16:40.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:16:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:16:50.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:16:55.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:17:00.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:17:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:17:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:17:15.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:17:20.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:17:22.182 [http-nio-8091-exec-24] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:17:22.182 [http-nio-8091-exec-24] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:17:22.190 [http-nio-8091-exec-24] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:17:22.198 [http-nio-8091-exec-24] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:17:22.198 [http-nio-8091-exec-24] INFO  DefaultLogicChain      - 生成的key:4
24-12-18.17:17:22.206 [http-nio-8091-exec-24] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:108
24-12-18.17:17:22.206 [http-nio-8091-exec-24] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:17:22.206 [http-nio-8091-exec-24] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:108
24-12-18.17:17:22.225 [http-nio-8091-exec-24] INFO  StrategyRepository     - 查询出来的规则:tree_lock_2
24-12-18.17:17:22.226 [http-nio-8091-exec-24] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_lock_2
24-12-18.17:17:22.255 [http-nio-8091-exec-24] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=3, treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleKey=rule_lock, createTime=Sat Jan 27 18:01:59 CST 2024, updateTime=Thu Feb 15 15:49:59 CST 2024)
24-12-18.17:17:22.255 [http-nio-8091-exec-24] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=2, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:17:22.256 [http-nio-8091-exec-24] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=2, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:17:22.256 [http-nio-8091-exec-24] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:17:22.256 [http-nio-8091-exec-24] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:17:22.256 [http-nio-8091-exec-24] INFO  RuleLockLogicTreeNode  - 策略树--次数锁规则：开始处理
24-12-18.17:17:22.256 [http-nio-8091-exec-24] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:17:22.256 [http-nio-8091-exec-24] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:17:22.256 [http-nio-8091-exec-24] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:108 strategyId:100006
24-12-18.17:17:22.287 [http-nio-8091-exec-24] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:17:22.287 [http-nio-8091-exec-24] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:17:22.288 [http-nio-8091-exec-24] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:17:22.288 [http-nio-8091-exec-24] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:17:22.298 [http-nio-8091-exec-24] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:17:22.298 [http-nio-8091-exec-24] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:17:22.298 [http-nio-8091-exec-24] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:17:25.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:17:30.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:17:35.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:17:37.593 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-12-18.17:17:47.603 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-12-18.17:33:35.563 [main            ] INFO  Application            - Starting Application using Java 1.8.0_432 on LAPTOP-FJDJGS3U with PID 20044 (D:\java\demoTest\s-pay-mall-mvc-241001-xfg-order-pay 2\ddd-103\ddd-103-app\target\classes started by 程宇乐 in D:\java\demoTest\s-pay-mall-mvc-241001-xfg-order-pay 2\ddd-103)
24-12-18.17:33:35.568 [main            ] INFO  Application            - The following 1 profile is active: "prod"
24-12-18.17:33:36.893 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-12-18.17:33:36.897 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-12-18.17:33:36.943 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 0 Redis repository interfaces.
24-12-18.17:33:37.744 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-12-18.17:33:37.746 [main            ] INFO  AprLifecycleListener   - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
24-12-18.17:33:37.746 [main            ] INFO  AprLifecycleListener   - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
24-12-18.17:33:37.747 [main            ] INFO  AprLifecycleListener   - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
24-12-18.17:33:37.777 [main            ] INFO  AprLifecycleListener   - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
24-12-18.17:33:37.802 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-12-18.17:33:37.803 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-12-18.17:33:37.803 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-12-18.17:33:37.970 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-12-18.17:33:37.970 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2332 ms
24-12-18.17:33:38.994 [main            ] INFO  Version                - Redisson 3.23.4
24-12-18.17:33:39.736 [redisson-netty-2-5] INFO  MasterPubSubConnectionPool - 1 connections initialized for 42.194.241.83/42.194.241.83:16379
24-12-18.17:33:39.830 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 42.194.241.83/42.194.241.83:16379
24-12-18.17:33:41.269 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-12-18.17:33:41.327 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-12-18.17:33:41.352 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-12-18.17:33:41.385 [main            ] INFO  Application            - Started Application in 6.683 seconds (JVM running for 8.136)
24-12-18.17:33:42.189 [RMI TCP Connection(2)-2.0.0.1] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-12-18.17:33:42.190 [RMI TCP Connection(2)-2.0.0.1] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-12-18.17:33:42.192 [RMI TCP Connection(2)-2.0.0.1] INFO  DispatcherServlet      - Completed initialization in 2 ms
24-12-18.17:33:42.195 [RMI TCP Connection(1)-2.0.0.1] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-12-18.17:33:42.968 [RMI TCP Connection(1)-2.0.0.1] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-12-18.17:33:45.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:33:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:33:51.359 [http-nio-8091-exec-1] INFO  IRaffleServiceController - 奖品列表查询接口开始--strategyId:0
24-12-18.17:33:51.484 [http-nio-8091-exec-1] INFO  IRaffleServiceController - 奖品列表查询接口成功--strategyId:0
24-12-18.17:33:55.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:00.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:00.626 [http-nio-8091-exec-2] INFO  IRaffleServiceController - 奖品列表查询接口开始--strategyId:100006
24-12-18.17:34:00.649 [http-nio-8091-exec-2] INFO  IRaffleServiceController - 奖品列表查询接口成功--strategyId:100006
24-12-18.17:34:05.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:06.332 [http-nio-8091-exec-4] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:34:06.335 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:34:06.350 [http-nio-8091-exec-4] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:34:06.360 [http-nio-8091-exec-4] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:34:06.360 [http-nio-8091-exec-4] INFO  DefaultLogicChain      - 生成的key:11
24-12-18.17:34:06.369 [http-nio-8091-exec-4] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:100
24-12-18.17:34:06.371 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:34:06.372 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:100
24-12-18.17:34:06.393 [http-nio-8091-exec-4] INFO  DefaultRaffleStrategy  - 奖品没有设置规则树
24-12-18.17:34:06.394 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:34:06.394 [http-nio-8091-exec-4] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:34:06.403 [http-nio-8091-exec-4] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:34:06.405 [http-nio-8091-exec-4] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:34:06.407 [http-nio-8091-exec-4] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:34:10.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:15.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:20.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:25.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:30.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:35.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:40.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:44.988 [http-nio-8091-exec-6] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:34:44.988 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:34:44.996 [http-nio-8091-exec-6] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:34:45.005 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:34:45.005 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 生成的key:1
24-12-18.17:34:45.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:45.015 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:108
24-12-18.17:34:45.017 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:34:45.017 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:108
24-12-18.17:34:45.035 [http-nio-8091-exec-6] INFO  StrategyRepository     - 查询出来的规则:tree_lock_2
24-12-18.17:34:45.037 [http-nio-8091-exec-6] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_lock_2
24-12-18.17:34:45.086 [http-nio-8091-exec-6] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=3, treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleKey=rule_lock, createTime=Sat Jan 27 18:01:59 CST 2024, updateTime=Thu Feb 15 15:49:59 CST 2024)
24-12-18.17:34:45.087 [http-nio-8091-exec-6] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=2, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:34:45.089 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_lock_2, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=2, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_2, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_2, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:34:45.089 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:34:45.089 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:34:45.089 [http-nio-8091-exec-6] INFO  RuleLockLogicTreeNode  - 策略树--次数锁规则：开始处理
24-12-18.17:34:45.091 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:34:45.092 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:34:45.092 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:108 strategyId:100006
24-12-18.17:34:45.155 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:34:45.155 [http-nio-8091-exec-6] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:34:45.156 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:34:45.156 [http-nio-8091-exec-6] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:34:45.165 [http-nio-8091-exec-6] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:34:45.165 [http-nio-8091-exec-6] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:34:45.165 [http-nio-8091-exec-6] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:34:50.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:50.029 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.17:34:55.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:34:59.127 [http-nio-8091-exec-8] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:34:59.128 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:34:59.137 [http-nio-8091-exec-8] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:34:59.148 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:34:59.148 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 生成的key:3
24-12-18.17:34:59.161 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:103
24-12-18.17:34:59.161 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:34:59.161 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:103
24-12-18.17:34:59.178 [http-nio-8091-exec-8] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.17:34:59.178 [http-nio-8091-exec-8] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.17:34:59.207 [http-nio-8091-exec-8] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.17:34:59.207 [http-nio-8091-exec-8] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:34:59.207 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:34:59.208 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:34:59.208 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:34:59.208 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:34:59.208 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:103 strategyId:100006
24-12-18.17:34:59.237 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:103
24-12-18.17:34:59.237 [http-nio-8091-exec-8] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_103
24-12-18.17:34:59.246 [http-nio-8091-exec-8] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=103, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=3, awardTitle=6等奖, awardSubtitle=null)
24-12-18.17:34:59.246 [http-nio-8091-exec-8] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:34:59.246 [http-nio-8091-exec-8] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:103 awardIndex:3
24-12-18.17:35:00.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:35:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:35:05.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.17:35:10.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:35:15.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:35:19.134 [http-nio-8091-exec-10] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:35:19.134 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:35:19.147 [http-nio-8091-exec-10] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:35:19.158 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:35:19.158 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 生成的key:12
24-12-18.17:35:19.167 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:102
24-12-18.17:35:19.167 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:35:19.167 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:102
24-12-18.17:35:19.184 [http-nio-8091-exec-10] INFO  StrategyRepository     - 查询出来的规则:tree_luck_award
24-12-18.17:35:19.184 [http-nio-8091-exec-10] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_luck_award
24-12-18.17:35:19.209 [http-nio-8091-exec-10] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=2, treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleKey=rule_stock, createTime=Thu Feb 15 15:35:06 CST 2024, updateTime=Thu Feb 15 15:50:20 CST 2024)
24-12-18.17:35:19.211 [http-nio-8091-exec-10] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:35:19.211 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_luck_award, treeName=规则树-兜底奖励, treeDesc=规则树-兜底奖励, treeRootRuleNode=rule_stock, treeNodeMap={rule_stock=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_luck_award, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_luck_award, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:35:19.211 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:35:19.211 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:35:19.211 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:35:19.211 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:102 strategyId:100006
24-12-18.17:35:19.228 [http-nio-8091-exec-10] INFO  StrategyRepository     - 策略奖品库存加锁失败：strategy_award_count_key_100006_102_97
24-12-18.17:35:19.228 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 库存扣减失败: userId:system,awardId:102 strategyId:100006
24-12-18.17:35:19.228 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:35:19.228 [http-nio-8091-exec-10] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:35:19.228 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:35:19.229 [http-nio-8091-exec-10] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:35:19.241 [http-nio-8091-exec-10] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:35:19.241 [http-nio-8091-exec-10] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:35:19.241 [http-nio-8091-exec-10] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:35:20.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:35:25.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:35:30.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:35:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:35:40.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:35:45.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:35:50.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:35:55.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:36:00.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:36:05.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:36:10.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:36:15.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:36:16.344 [http-nio-8091-exec-12] INFO  IRaffleServiceController - 调用抽奖接口
24-12-18.17:36:16.345 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - 校验参数成功
24-12-18.17:36:16.352 [http-nio-8091-exec-12] INFO  DefaultChainFactory    - 前置规则为空
24-12-18.17:36:16.361 [http-nio-8091-exec-12] INFO  DefaultLogicChain      - rateRange：13
24-12-18.17:36:16.361 [http-nio-8091-exec-12] INFO  DefaultLogicChain      - 生成的key:10
24-12-18.17:36:16.373 [http-nio-8091-exec-12] INFO  DefaultLogicChain      - 抽奖责任链默认处理 userId:system strategyId:100006 ruleModel:rule_default awardId:107
24-12-18.17:36:16.373 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - rule_default
24-12-18.17:36:16.373 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - 前置规则处理完成，获得奖品:107
24-12-18.17:36:16.390 [http-nio-8091-exec-12] INFO  StrategyRepository     - 查询出来的规则:tree_lock_1
24-12-18.17:36:16.390 [http-nio-8091-exec-12] INFO  DefaultRaffleStrategy  - 奖品对应的规则：tree_lock_1
24-12-18.17:36:16.415 [http-nio-8091-exec-12] INFO  StrategyRepository     - 数据库查询的ruleTree:RuleTree(id=1, treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleKey=rule_lock, createTime=Sat Jan 27 18:01:59 CST 2024, updateTime=Thu Feb 15 15:49:59 CST 2024)
24-12-18.17:36:16.415 [http-nio-8091-exec-12] INFO  DefaultRaffleStrategy  - 工厂装配的 RuleTreeVo：RuleTreeVO(treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=1, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:36:16.415 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - ruleTreeVo:RuleTreeVO(treeId=tree_lock_1, treeName=规则树, treeDesc=规则树, treeRootRuleNode=rule_lock, treeNodeMap={rule_lock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_lock, ruleDesc=限定用户已完成N次抽奖后解锁, ruleValue=1, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_stock, ruleLimitType=EQUAL, ruleLimitValue=ALLOW), RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_lock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=TAKE_OVER)]), rule_stock=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_stock, ruleDesc=库存扣减规则, ruleValue=null, treeNodeLineVOList=[RuleTreeNodeLineVO(treeId=tree_lock_1, ruleNodeFrom=rule_stock, ruleNodeTo=rule_luck_award, ruleLimitType=EQUAL, ruleLimitValue=ALLOW)]), rule_luck_award=RuleTreeNodeVO(treeId=tree_lock_1, ruleKey=rule_luck_award, ruleDesc=兜底奖品随机积分, ruleValue=101:1,100, treeNodeLineVOList=null)})
24-12-18.17:36:16.415 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:36:16.415 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - next:rule_lock
24-12-18.17:36:16.415 [http-nio-8091-exec-12] INFO  RuleLockLogicTreeNode  - 策略树--次数锁规则：开始处理
24-12-18.17:36:16.416 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - next:rule_stock
24-12-18.17:36:16.416 [http-nio-8091-exec-12] INFO  RuleStockLogicTreeNode - 策略树--库存规则：开始处理
24-12-18.17:36:16.416 [http-nio-8091-exec-12] INFO  RuleStockLogicTreeNode - 开始扣减库存: userId:system,awardId:107 strategyId:100006
24-12-18.17:36:16.441 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - next:rule_luck_award
24-12-18.17:36:16.441 [http-nio-8091-exec-12] INFO  RuleLuckAwardLogicTreeNode - 策略树--兜底规则：开始处理
24-12-18.17:36:16.441 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - 策略树处理完成,获得奖品:100
24-12-18.17:36:16.441 [http-nio-8091-exec-12] INFO  StrategyRepository     - cacheKey:big_market_strategy_award_key_100006_100
24-12-18.17:36:16.450 [http-nio-8091-exec-12] INFO  StrategyRepository     - test 缓存中获取 StrategyAwardEntity(strategyId=100006, awardId=100, awardCount=100, awardCountSurplus=100, awardRate=0.0300, sort=0, awardTitle=test, awardSubtitle=null)
24-12-18.17:36:16.450 [http-nio-8091-exec-12] INFO  IRaffleServiceController - 调用抽奖成功
24-12-18.17:36:16.450 [http-nio-8091-exec-12] INFO  IRaffleServiceController - 获得随机抽奖奖品接口完成--awardId:100 awardIndex:0
24-12-18.17:36:20.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:36:20.025 [scheduling-1    ] INFO  UpdateAwardStockJob    - 更新数据库
24-12-18.17:36:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:36:30.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:36:35.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:36:40.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:36:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:36:50.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:36:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:37:00.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:37:05.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:37:10.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:37:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:37:20.135 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:37:25.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:37:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:37:35.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:37:40.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:37:45.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:37:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:37:55.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:38:00.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:38:05.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:38:10.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:38:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:38:20.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:38:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:38:30.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新库存
24-12-18.17:38:33.836 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-12-18.17:38:33.927 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
